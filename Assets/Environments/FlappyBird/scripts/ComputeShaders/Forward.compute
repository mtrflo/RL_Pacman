// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

RWStructuredBuffer<double> outputs;
RWStructuredBuffer<double> activatedValues;
StructuredBuffer<double> Weights;
StructuredBuffer<double> inputs;
StructuredBuffer<double> Biases;
int InputSize;
//LReLu
double Activate(double z)
{
    const double a = 0.01;
    return (z >= 0) ? z : a * z;
}

double Derivative(double z)
{
    const double a = 0.01;
    return (z >= 0) ? 1 : a;
}
//LReLu

[numthreads(10,1,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    // TODO: insert actual code here!

    //Result[id.xy] = float4(id.x & id.y, (id.x & 15)/15.0, (id.y & 15)/15.0, 0.0);
    
    double calcOutput = 0;
    //for (int nodeIndex = 0,inputIndex = 0; nodeIndex < NodeSize; nodeIndex++)
    //{
        
    for (int inputIndex = 0; inputIndex < InputSize; inputIndex++)
    {
        calcOutput += Weights[id.x * InputSize + inputIndex] * inputs[inputIndex];
    }
    calcOutput += Biases[id.x];
    outputs[id.x]= calcOutput;
                
    activatedValues[id.x] = Activate(calcOutput);
    //}
}
